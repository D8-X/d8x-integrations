{
  "address": "0x0e547B49cf082dA315c7E9215B73fEF5FD108875",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_perpetualProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderDigest",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        }
      ],
      "name": "CallbackReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "perpetualId",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountDecN",
          "type": "uint256"
        }
      ],
      "name": "MarginTokenSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "perpetualId",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lobAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mgnTknAddrOfPool",
          "type": "address"
        }
      ],
      "name": "PerpetualAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PerpetualOrderSubmitFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amountDec18",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "leverageTDR",
          "type": "uint16"
        }
      ],
      "name": "PerpetualOrderSubmitSuccess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_iPerpetualId",
          "type": "uint24"
        }
      ],
      "name": "addPerpetual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_iPerpetualId",
          "type": "uint24"
        }
      ],
      "name": "approveAmountForPerpetualMgnTkn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderDigest",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        }
      ],
      "name": "d8xExecutionCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_iPerpetualId",
          "type": "uint24"
        }
      ],
      "name": "getMarginAccount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "lockedInValueQCD18",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cashCCD18",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSizeBCD18",
              "type": "int256"
            },
            {
              "internalType": "bytes16",
              "name": "positionId",
              "type": "bytes16"
            }
          ],
          "internalType": "struct D18MarginAccount",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_iPerpetualId",
          "type": "uint24"
        },
        {
          "internalType": "bool",
          "name": "isBuy",
          "type": "bool"
        }
      ],
      "name": "getMaxTradeAmount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mgnTknAddrOfPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "name": "orderBookOfPerpetual",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perpetualProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_iPerpetualId",
          "type": "uint24"
        },
        {
          "internalType": "int256",
          "name": "_amountDec18",
          "type": "int256"
        },
        {
          "internalType": "uint16",
          "name": "_leverageTDR",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_flags",
          "type": "uint32"
        }
      ],
      "name": "postOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_iPerpetualId",
          "type": "uint24"
        }
      ],
      "name": "transferMarginCollateralTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2bf486ad141209e6a9ac1d13011c89335a3d497c620314f52361b26f01b43d5",
  "receipt": {
    "to": null,
    "from": "0x6FE871703EB23771c4016eB62140367944e8EdFc",
    "contractAddress": "0x0e547B49cf082dA315c7E9215B73fEF5FD108875",
    "transactionIndex": 0,
    "gasUsed": "1690878",
    "logsBloom": "0x
    "blockHash": "0x983da8bc4297e88e3a647869818a2a312dba695b4f2b08115e8529e6f3388b55",
    "transactionHash": "0xf2bf486ad141209e6a9ac1d13011c89335a3d497c620314f52361b26f01b43d5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2477899,
        "transactionHash": "0xf2bf486ad141209e6a9ac1d13011c89335a3d497c620314f52361b26f01b43d5",
        "address": "0x0e547B49cf082dA315c7E9215B73fEF5FD108875",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fe871703eb23771c4016eb62140367944e8edfc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x983da8bc4297e88e3a647869818a2a312dba695b4f2b08115e8529e6f3388b55"
      }
    ],
    "blockNumber": 2477899,
    "cumulativeGasUsed": "1690878",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x70212F1E2eB66C82990312FA5AB3f851706fD1E1"
  ],
  "numDeployments": 1,
  "solcInputHash": "d6f9c354fc58f90894bad6b14463b340",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_perpetualProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"name\":\"CallbackReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"perpetualId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDecN\",\"type\":\"uint256\"}],\"name\":\"MarginTokenSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"perpetualId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lobAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mgnTknAddrOfPool\",\"type\":\"address\"}],\"name\":\"PerpetualAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PerpetualOrderSubmitFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amountDec18\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"leverageTDR\",\"type\":\"uint16\"}],\"name\":\"PerpetualOrderSubmitSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_iPerpetualId\",\"type\":\"uint24\"}],\"name\":\"addPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_iPerpetualId\",\"type\":\"uint24\"}],\"name\":\"approveAmountForPerpetualMgnTkn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderDigest\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"}],\"name\":\"d8xExecutionCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_iPerpetualId\",\"type\":\"uint24\"}],\"name\":\"getMarginAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"lockedInValueQCD18\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cashCCD18\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSizeBCD18\",\"type\":\"int256\"},{\"internalType\":\"bytes16\",\"name\":\"positionId\",\"type\":\"bytes16\"}],\"internalType\":\"struct D18MarginAccount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_iPerpetualId\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"getMaxTradeAmount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mgnTknAddrOfPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"orderBookOfPerpetual\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perpetualProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_iPerpetualId\",\"type\":\"uint24\"},{\"internalType\":\"int256\",\"name\":\"_amountDec18\",\"type\":\"int256\"},{\"internalType\":\"uint16\",\"name\":\"_leverageTDR\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_flags\",\"type\":\"uint32\"}],\"name\":\"postOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_iPerpetualId\",\"type\":\"uint24\"}],\"name\":\"transferMarginCollateralTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPerpetual(uint24)\":{\"params\":{\"_iPerpetualId\":\"id of the perpetual to be traded\"}},\"approveAmountForPerpetualMgnTkn(uint256,uint24)\":{\"params\":{\"_amount\":\"spend amount\"}},\"d8xExecutionCallback(bytes32,bool)\":{\"params\":{\"isExecuted\":\"true if order was succesfully executed\",\"orderDigest\":\"unique identifier for the order\"}},\"getMarginAccount(uint24)\":{\"params\":{\"_iPerpetualId\":\"id of perpetual \"}},\"getMaxTradeAmount(uint24,bool)\":{\"params\":{\"_iPerpetualId\":\"id of perpetual\",\"isBuy\":\"true if we go long, false if we go short\"},\"returns\":{\"_0\":\"signed maximal trade size (negative if resulting position is short, positive otherwise)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postOrder(uint24,int256,uint16,uint32)\":{\"params\":{\"_amountDec18\":\"signed amount to be traded in base currency\",\"_flags\":\"order-flags, can be left 0 for a market order\",\"_iPerpetualId\":\"perpetual id for which we execute\",\"_leverageTDR\":\"leverage two-digit-integer), e.g. 210 for 2.1x leverage\"},\"returns\":{\"_0\":\"true if posting order succeeded\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPerpetual(uint24)\":{\"notice\":\"Anyone add a perpetual. Needs to be set once per perpetual. The function sets the order book address for an existing perpetual-id and ensures the margin token address is stored. \"},\"approveAmountForPerpetualMgnTkn(uint256,uint24)\":{\"notice\":\"Approve the margin-token to be spent by perpetuals contract. Required to trade.\"},\"d8xExecutionCallback(bytes32,bool)\":{\"notice\":\"Callback function that will be called once the order is executed or cancelled\"},\"getMarginAccount(uint24)\":{\"notice\":\"Return margin account information in decimal 18 format\"},\"getMaxTradeAmount(uint24,bool)\":{\"notice\":\"Get maximal trade amount for the contract accounting for its current position\"},\"postOrder(uint24,int256,uint16,uint32)\":{\"notice\":\"Post an order to the order book. Order will be executed by external \\\"executors\\\". * Available order flags:  uint32 internal constant MASK_CLOSE_ONLY = 0x80000000;  uint32 internal constant MASK_MARKET_ORDER = 0x40000000;  uint32 internal constant MASK_STOP_ORDER = 0x20000000;  uint32 internal constant MASK_FILL_OR_KILL = 0x10000000;  uint32 internal constant MASK_KEEP_POS_LEVERAGE = 0x08000000;  uint32 internal constant MASK_LIMIT_ORDER = 0x04000000;\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnChainTrader.sol\":\"OnChainTrader\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":512},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IClientOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Trader/Broker facing order struct\\n * @notice this order struct is sent to the limit order book and converted into an IPerpetualOrder\\n */\\ninterface IClientOrder {\\n    struct ClientOrder {\\n        uint24 iPerpetualId; // unique id of the perpetual\\n        int128 fLimitPrice; // order will not execute if realized price is above (buy) or below (sell) this price\\n        uint16 leverageTDR; // leverage, set to 0 if deposit margin and trade separate; format: two-digit integer (e.g., 12.34 -> 1234)\\n        uint32 executionTimestamp; // the order will not be executed before this timestamp, allows TWAP orders\\n        uint32 flags; // Order-flags are specified in OrderFlags.sol\\n        uint32 iDeadline; // order will not be executed after this deadline\\n        address brokerAddr; // can be empty, address of the broker\\n        int128 fTriggerPrice; // trigger price for stop-orders|0. Order can be executed if the mark price is below this price (sell order) or above (buy)\\n        int128 fAmount; // signed amount of base-currency. Will be rounded to lot size\\n        bytes32 parentChildDigest1; // see notice in LimitOrderBook.sol\\n        address traderAddr; // address of the trader\\n        bytes32 parentChildDigest2; // see notice in LimitOrderBook.sol\\n        uint16 brokerFeeTbps; // broker fee in tenth of a basis point\\n        bytes brokerSignature; // signature, can be empty if no brokerAddr provided\\n        address callbackTarget; // address of contract implementing callback function\\n        //address executorAddr; <- will be set by LimitOrderBook\\n        //uint64 submittedBlock <- will be set by LimitOrderBook\\n    }\\n}\\n\\ninterface ID8XExecutionCallbackReceiver {\\n    function d8xExecutionCallback(bytes32 orderDigest, bool isExecuted) external;\\n}\\n\",\"keccak256\":\"0x44a41787113bb05204966f1d211fd46657239754767dd5513ce85db38aeb9ec8\",\"license\":\"MIT\"},\"contracts/ILiquidityPoolData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ILiquidityPoolData {\\n\\n    struct LiquidityPoolData {\\n            bool isRunning; // state\\n            uint8 iPerpetualCount; // state\\n            uint8 id; // parameter: index, starts from 1\\n            int32 fCeilPnLShare; // parameter: cap on the share of PnL allocated to liquidity providers\\n            uint8 marginTokenDecimals; // parameter: decimals of margin token, inferred from token contract\\n            uint16 iTargetPoolSizeUpdateTime; //parameter: timestamp in seconds. How often we update the pool's target size\\n            address marginTokenAddress; //parameter: address of the margin token\\n            // -----\\n            uint64 prevAnchor; // state: keep track of timestamp since last withdrawal was initiated\\n            int128 fRedemptionRate; // state: used for settlement in case of AMM default\\n            address shareTokenAddress; // parameter\\n            // -----\\n            int128 fPnLparticipantsCashCC; // state: addLiquidity/withdrawLiquidity + profit/loss - rebalance\\n            int128 fTargetAMMFundSize; // state: target liquidity for all perpetuals in pool (sum)\\n            // -----\\n            int128 fDefaultFundCashCC; // state: profit/loss\\n            int128 fTargetDFSize; // state: target default fund size for all perpetuals in pool\\n            // -----\\n            int128 fBrokerCollateralLotSize; // param:how much collateral do brokers deposit when providing \\\"1 lot\\\" (not trading lot)\\n            uint128 prevTokenAmount; // state\\n            // -----\\n            uint128 nextTokenAmount; // state\\n            uint128 totalSupplyShareToken; // state\\n            // -----\\n            int128 fBrokerFundCashCC; // state: amount of cash in broker fund\\n    }\\n\\n}\",\"keccak256\":\"0x2d3495679371a8c8d0c6f676ddf69ccae8d11f01022d4f3067dc0e092b03d2f7\",\"license\":\"MIT\"},\"contracts/OnChainTrader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./IClientOrder.sol\\\";\\nimport \\\"./ILiquidityPoolData.sol\\\";\\n\\n/**\\n * @title Example contract to interact with D8X perpetuals on-chain\\n * @notice\\n * - This contract acts as a trader. The contract is ownable;\\n *   Trade executions are permissioned. The margin tokens are required\\n *   to be owned by the contract.\\n * - D8X Perpetuals use ABDK 128x128 number format. This contract has an interface that uses\\n *   a signed decimal-18 convention (decimal number 1 maps to decimal-18 number 1e18).\\n * - Ensure the perpetuals-contract is allowed to spend this contracts margin tokens (use approveAmount)\\n * - Send orders to order book via postOrder\\n * - Check positions using function getMarginAccount\\n */\\n\\n\\ninterface OrderBookContractInterface {\\n    function postOrders(IClientOrder.ClientOrder[] calldata _orders, bytes[] calldata _signatures)\\n        external;\\n}\\n\\ninterface PerpetualsContractInterface {\\n    \\n    function getMarginAccount(uint24 _perpetualId, address _traderAddress)\\n        external\\n        view\\n        returns (MarginAccount memory);\\n\\n    function getMaxSignedOpenTradeSizeForPos(\\n        uint24 _perpetualId,\\n        int128 _fCurrentTraderPos,\\n        bool _isBuy\\n    ) external view returns (int128);\\n\\n    function getOrderBookAddress(uint24 _perpetualId) external view returns (address);\\n    function getLiquidityPool(uint8 _poolId)\\n        external\\n        view\\n        returns (ILiquidityPoolData.LiquidityPoolData memory);\\n}\\n\\n/**\\n * @notice  D8X Perpetual Data structure to store user margin information.\\n */\\nstruct MarginAccount {\\n    int128 fLockedInValueQC; // unrealized value locked-in when trade occurs in\\n    int128 fCashCC; // cash in collateral currency (base, quote, or quanto)\\n    int128 fPositionBC; // position in base currency (e.g., 1 BTC for BTCUSD)\\n    int128 fUnitAccumulatedFundingStart; // accumulated funding rate\\n    uint64 iLastOpenTimestamp; // timestamp in seconds when the position was last opened/increased\\n    uint16 feeTbps; // exchange fee in tenth of a basis point\\n    uint16 brokerFeeTbps; // broker fee in tenth of a basis point\\n    bytes16 positionId; // unique id for the position (for given trader, and perpetual). Current position, zero otherwise.\\n}\\n\\n/**\\n * @notice  Data structure to return simplified and relevant margin information.\\n */\\nstruct D18MarginAccount {\\n    int256 lockedInValueQCD18; // unrealized value locked-in when trade occurs: notional amount * price in decimal 18 format\\n    int256 cashCCD18; // cash in collateral currency (base, quote, or quanto) in decimal 18 format\\n    int256 positionSizeBCD18; // position in base currency (e.g., 1 BTC for BTCUSD) in decimal 18 format\\n    bytes16 positionId; // unique id for the position (for given trader, and perpetual). Current position, zero otherwise.\\n}\\n\\ncontract OnChainTrader is Ownable, ID8XExecutionCallbackReceiver {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    event PerpetualOrderSubmitFailed(string reason);\\n    event PerpetualOrderSubmitSuccess(int256 amountDec18, uint16 leverageTDR);\\n    event PerpetualAdded(uint24 perpetualId, address lobAddr, address mgnTknAddrOfPool);\\n    event MarginTokenSent(uint24 perpetualId, address to, uint256 amountDecN);\\n    event CallbackReceived(bytes32 orderDigest, bool isExecuted);\\n\\n    address public immutable perpetualProxy;\\n    int256 private constant DECIMALS = 10**18;\\n    int128 private constant ONE_64x64 = 2**64;\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    int128 private constant TEN_64x64 = 0xa0000000000000000;\\n\\n    mapping (uint24 => address) public orderBookOfPerpetual;//limit order book addr\\n    \\n    // each perpetual is in a pool. Perpetuals in a pool share the margin token\\n    mapping (uint8 => address) public mgnTknAddrOfPool;\\n\\n    constructor(\\n        address _perpetualProxy\\n    ) Ownable() {\\n        perpetualProxy = _perpetualProxy;\\n    }\\n\\n    /**\\n     * Anyone add a perpetual. Needs to be set once per perpetual.\\n     * The function sets the order book address for an existing\\n     * perpetual-id and ensures the margin token address is stored. \\n     * @param _iPerpetualId id of the perpetual to be traded\\n     */\\n    function addPerpetual(uint24 _iPerpetualId) external {\\n        // set order book address\\n        address lobAddr = PerpetualsContractInterface(perpetualProxy).getOrderBookAddress(_iPerpetualId);\\n        orderBookOfPerpetual[_iPerpetualId] = lobAddr;\\n        // register margin token\\n        uint8 poolId = uint8(_iPerpetualId/100_000);\\n        if(mgnTknAddrOfPool[poolId] == address(0)) {\\n            // set margin token address for pool\\n            ILiquidityPoolData.LiquidityPoolData memory lp = \\n                PerpetualsContractInterface(perpetualProxy).getLiquidityPool(poolId);\\n            mgnTknAddrOfPool[poolId] = lp.marginTokenAddress;\\n        }\\n        emit PerpetualAdded(_iPerpetualId, lobAddr, mgnTknAddrOfPool[poolId]);\\n    }\\n\\n    /**\\n     * Approve the margin-token to be spent by perpetuals contract.\\n     * Required to trade.\\n     * @param _amount spend amount\\n     */\\n    function approveAmountForPerpetualMgnTkn(uint256 _amount, uint24 _iPerpetualId) external {\\n        uint8 poolId = uint8(_iPerpetualId/100_000);\\n        address mgnTkn = mgnTknAddrOfPool[poolId];\\n        require(mgnTkn!=address(0), \\\"set ob addrs\\\");\\n        IERC20(mgnTkn).approve(perpetualProxy, _amount);\\n    }\\n\\n    /**\\n     * Post an order to the order book. Order will be executed by\\n     * external \\\"executors\\\".\\n     * * Available order flags:\\n     *  uint32 internal constant MASK_CLOSE_ONLY = 0x80000000;\\n     *  uint32 internal constant MASK_MARKET_ORDER = 0x40000000;\\n     *  uint32 internal constant MASK_STOP_ORDER = 0x20000000;\\n     *  uint32 internal constant MASK_FILL_OR_KILL = 0x10000000;\\n     *  uint32 internal constant MASK_KEEP_POS_LEVERAGE = 0x08000000;\\n     *  uint32 internal constant MASK_LIMIT_ORDER = 0x04000000;\\n     * @param _iPerpetualId perpetual id for which we execute\\n     * @param _amountDec18 signed amount to be traded in base currency\\n     * @param _leverageTDR leverage two-digit-integer), e.g. 210 for 2.1x leverage\\n     * @param _flags order-flags, can be left 0 for a market order\\n     * @return true if posting order succeeded\\n     */\\n    function postOrder(uint24 _iPerpetualId, int256 _amountDec18, uint16 _leverageTDR, uint32 _flags) onlyOwner external returns (bool) {\\n         address orderBookAddr = orderBookOfPerpetual[_iPerpetualId];\\n         require(orderBookAddr!=address(0), \\\"order book unknown\\\");\\n        int128 fTradeAmount = _fromDec18(_amountDec18);\\n        if (_flags==0) {\\n             _flags = 0x40000000;//market order\\n        }\\n        IClientOrder.ClientOrder[] memory order = new IClientOrder.ClientOrder[](1);\\n        order[0].flags = _flags;\\n        order[0].iPerpetualId = _iPerpetualId;\\n        order[0].traderAddr = address(this);\\n        order[0].fAmount = fTradeAmount;\\n        order[0].fLimitPrice = fTradeAmount > 0 ? MAX_64x64 : int128(0);\\n        order[0].leverageTDR = _leverageTDR; // 0 if deposit and trade separate\\n        order[0].iDeadline = uint32(block.timestamp + 86400 * 3);\\n        order[0].executionTimestamp = uint32(block.timestamp);\\n        // specify callback target\\n        order[0].callbackTarget = address(this);\\n        // submit order\\n        bytes[] memory sig = new bytes[](1);\\n        try OrderBookContractInterface(orderBookAddr).postOrders(order, sig) {\\n            emit PerpetualOrderSubmitSuccess(_amountDec18, _leverageTDR);\\n            return true;\\n        } catch Error(string memory reason) {\\n            emit PerpetualOrderSubmitFailed(reason);\\n            return false;\\n        }\\n    }\\n\\n    function transferMarginCollateralTo(uint24 _iPerpetualId) onlyOwner external {\\n        uint8 poolId = uint8(_iPerpetualId/100_000);\\n        address mgnTknAddr = mgnTknAddrOfPool[poolId];\\n        IERC20Upgradeable marginToken = IERC20Upgradeable(mgnTknAddr);\\n        uint256 balance = marginToken.balanceOf(address(this));\\n        // transfer the margin token to the user\\n        marginToken.safeTransfer(msg.sender, balance);\\n        emit MarginTokenSent(_iPerpetualId, msg.sender, balance);\\n    }\\n\\n    /**\\n     * Return margin account information in decimal 18 format\\n     * @param _iPerpetualId id of perpetual \\n     */\\n    function getMarginAccount(uint24 _iPerpetualId) external view returns (D18MarginAccount memory) {\\n        MarginAccount memory acc = PerpetualsContractInterface(perpetualProxy).getMarginAccount(\\n            _iPerpetualId,\\n            address(this)\\n        );\\n        D18MarginAccount memory accD18;\\n        accD18.lockedInValueQCD18 = toDec18(acc.fLockedInValueQC); // unrealized value locked-in when trade occmurs: price * position size\\n        accD18.cashCCD18 = toDec18(acc.fCashCC); // cash in collateral currency (base, quote, or quanto)\\n        accD18.positionSizeBCD18 = toDec18(acc.fPositionBC); // position in base currency (e.g., 1 BTC for BTCUSD)\\n        accD18.positionId = acc.positionId; // unique id for the position (for given trader, and perpetual).\\n        return accD18;\\n    }\\n\\n    /**\\n     * Get maximal trade amount for the contract accounting for its current position\\n     * @param _iPerpetualId id of perpetual\\n     * @param isBuy true if we go long, false if we go short\\n     * @return signed maximal trade size (negative if resulting position is short, positive otherwise)\\n     */\\n    function getMaxTradeAmount(uint24 _iPerpetualId, bool isBuy) external view returns (int256) {\\n        MarginAccount memory acc = PerpetualsContractInterface(perpetualProxy).getMarginAccount(\\n            _iPerpetualId,\\n            address(this)\\n        );\\n        int128 fSize = PerpetualsContractInterface(perpetualProxy).getMaxSignedOpenTradeSizeForPos(\\n            _iPerpetualId,\\n            acc.fPositionBC,\\n            isBuy\\n        );\\n\\n        return toDec18(fSize);\\n    }\\n\\n    /**\\n     * Convert signed decimal-18 number to ABDK-128x128 format\\n     * @param x number decimal-18\\n     * @return ABDK-128x128 number\\n     */\\n    function _fromDec18(int256 x) internal pure returns (int128) {\\n        int256 result = (x * ONE_64x64) / DECIMALS;\\n        require(x >= MIN_64x64 && x <= MAX_64x64, \\\"result out of range\\\");\\n        return int128(result);\\n    }\\n\\n    /**\\n     * Convert ABDK-128x128 format to signed decimal-18 number\\n     * @param x number in ABDK-128x128 format\\n     * @return decimal 18 (signed)\\n     */\\n    function toDec18(int128 x) internal pure returns (int256) {\\n        return (int256(x) * DECIMALS) / ONE_64x64;\\n    }\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function _fromInt(int256 x) internal pure returns (int128) {\\n        require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF, \\\"ABDK.fromInt\\\");\\n        return int128(x << 64);\\n    }\\n\\n    /**\\n     * Callback function that will be called once the order is executed or cancelled\\n     * @param orderDigest unique identifier for the order\\n     * @param isExecuted true if order was succesfully executed\\n     */\\n    function d8xExecutionCallback(bytes32 orderDigest, bool isExecuted) external {\\n        // msg.sender is the order-book contract, so we can upgrade the corresponding\\n        // margin account\\n        emit CallbackReceived(orderDigest, isExecuted);\\n    }\\n}\\n\",\"keccak256\":\"0x03cd5daee3fceb10b44b280c52e1710400fd37eff96fd14a7eb0d3bcd26115ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806362bcc2581161008c5780639fbb0a3b116100665780639fbb0a3b146101e9578063b1bd155e14610242578063ba0e939914610255578063f2fde38b1461027e57600080fd5b806362bcc258146101ad578063715018a6146101d05780638da5cb5b146101d857600080fd5b8063230f2384116100bd578063230f2384146101605780633e99a53b146101735780635db35a041461019a57600080fd5b80630330d0c0146100e45780630df3ad4c1461012a57806322ad65db1461014b575b600080fd5b61010d6100f23660046113f5565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d61013836600461141e565b610291565b604051908152602001610121565b61015e610159366004611455565b6103eb565b005b61015e61016e3660046113f5565b610429565b61010d7f000000000000000000000000000000000000000000000000000000000000000081565b61015e6101a836600461147a565b61057b565b6101c06101bb3660046114b6565b61067f565b6040519015158152602001610121565b61015e610b3d565b6000546001600160a01b031661010d565b6101fc6101f73660046113f5565b610ba3565b60405161012191908151815260208083015190820152604080830151908201526060918201516fffffffffffffffffffffffffffffffff19169181019190915260800190565b61015e6102503660046113f5565b610d0f565b61010d61026336600461151f565b6002602052600090815260409020546001600160a01b031681565b61015e61028c366004611551565b610f2d565b604051633d53a26b60e11b815262ffffff8316600482015230602482015260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637aa744d69060440161010060405180830381865afa158015610306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032a9190611637565b6040808201519051633ef0eb0f60e21b815262ffffff87166004820152600f9190910b602482015284151560448201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fbc3ac3c90606401602060405180830381865afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d5919061170a565b90506103e081610ff8565b925050505b92915050565b6040805183815282151560208201527fdd31864b23bd4f09a8914c3ee2c028bd0cbf0186a8eec21258681488239b92dd910160405180910390a15050565b6000546001600160a01b031633146104885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000610497620186a083611751565b60ff81166000908152600260205260408082205490516370a0823160e01b81523060048201529293506001600160a01b03169182919082906370a0823190602401602060405180830381865afa1580156104f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105199190611773565b905061052f6001600160a01b0383163383611024565b6040805162ffffff871681523360208201529081018290527fd7089a64efa4caccaea095308c4da0682a70797771cee9b36ab4a639054035929060600160405180910390a15050505050565b600061058a620186a083611751565b60ff81166000908152600260205260409020549091506001600160a01b0316806105e55760405162461bcd60e51b815260206004820152600c60248201526b736574206f6220616464727360a01b604482015260640161047f565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905282169063095ea7b3906044016020604051808303816000875af1158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190611797565b5050505050565b600080546001600160a01b031633146106da5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161047f565b62ffffff85166000908152600160205260409020546001600160a01b0316806107455760405162461bcd60e51b815260206004820152601260248201527f6f7264657220626f6f6b20756e6b6e6f776e0000000000000000000000000000604482015260640161047f565b600061075086611090565b90508363ffffffff1660000361076857634000000093505b604080516001808252818301909252600091816020015b604080516101e0810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290526101a08301526101c0820152825260001990920191018161077f579050509050848160008151811061081d5761081d6117b4565b60200260200101516080019063ffffffff16908163ffffffff1681525050878160008151811061084f5761084f6117b4565b60200260200101516000019062ffffff16908162ffffff1681525050308160008151811061087f5761087f6117b4565b602002602001015161014001906001600160a01b031690816001600160a01b03168152505081816000815181106108b8576108b86117b4565b60200260200101516101000190600f0b9081600f0b81525050600082600f0b136108e35760006108f5565b6f7fffffffffffffffffffffffffffffff5b81600081518110610908576109086117b4565b602002602001015160200190600f0b9081600f0b815250508581600081518110610934576109346117b4565b602090810291909101015161ffff909116604090910152610958426203f4806117ca565b8160008151811061096b5761096b6117b4565b602002602001015160a0019063ffffffff16908163ffffffff1681525050428160008151811061099d5761099d6117b4565b60200260200101516060019063ffffffff16908163ffffffff168152505030816000815181106109cf576109cf6117b4565b60209081029190910101516001600160a01b03919091166101c090910152604080516001808252818301909252600091816020015b6060815260200190600190039081610a04575050604051632a69792760e21b81529091506001600160a01b0385169063a9a5e49c90610a499085908590600401611882565b600060405180830381600087803b158015610a6357600080fd5b505af1925050508015610a74575060015b610af057610a806119f4565b806308c379a003610ae45750610a94611a10565b80610a9f5750610ae6565b7f2858238d037e52471d3ad4944d280cdb1fd3b479a3fdf698bb04e99572e6efa881604051610ace9190611a9a565b60405180910390a1600095505050505050610b35565b505b3d6000803e3d6000fd5b6040805189815261ffff891660208201527f742895f70ed9b3e00487db3827a00b9c91de8360cd96129050b8a82c99de4862910160405180910390a160019450505050505b949350505050565b6000546001600160a01b03163314610b975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161047f565b610ba16000611138565b565b610be1604051806080016040528060008152602001600081526020016000815260200160006fffffffffffffffffffffffffffffffff191681525090565b604051633d53a26b60e11b815262ffffff831660048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637aa744d69060440161010060405180830381865afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190611637565b9050610cb8604051806080016040528060008152602001600081526020016000815260200160006fffffffffffffffffffffffffffffffff191681525090565b8151610cc390610ff8565b81526020820151610cd390610ff8565b60208201526040820151610ce690610ff8565b604082015260e0909101516fffffffffffffffffffffffffffffffff1916606082015292915050565b60405163079e02e960e21b815262ffffff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631e780ba490602401602060405180830381865afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f9190611ab8565b62ffffff8316600090815260016020526040812080546001600160a01b0319166001600160a01b038416179055909150610ddc620186a084611751565b60ff81166000908152600260205260409020549091506001600160a01b0316610ec357604051631857be3960e11b815260ff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906330af7c729060240161026060405180830381865afa158015610e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8e9190611b12565b60c0015160ff8316600090815260026020526040902080546001600160a01b0319166001600160a01b03909216919091179055505b60ff811660009081526002602090815260409182902054825162ffffff871681526001600160a01b038681169382019390935291168183015290517f5222a91cec499c7c85c5fcb8b8ddfb81880ec40273d8cda372740d8a97fa6ec79181900360600190a1505050565b6000546001600160a01b03163314610f875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161047f565b6001600160a01b038116610fec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161047f565b610ff581611138565b50565b60006801000000000000000061101a670de0b6b3a7640000600f85900b611c7c565b6103e59190611cac565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261108b908490611188565b505050565b600080670de0b6b3a76400006110af6801000000000000000085611c7c565b6110b99190611cac565b90506f7fffffffffffffffffffffffffffffff1983128015906110ec57506f7fffffffffffffffffffffffffffffff8313155b6103e55760405162461bcd60e51b815260206004820152601360248201527f726573756c74206f7574206f662072616e676500000000000000000000000000604482015260640161047f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006111dd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661125a9092919063ffffffff16565b80519091501561108b57808060200190518101906111fb9190611797565b61108b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161047f565b60606112698484600085611273565b90505b9392505050565b6060824710156112d45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161047f565b6001600160a01b0385163b61132b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161047f565b600080866001600160a01b031685876040516113479190611cda565b60006040518083038185875af1925050503d8060008114611384576040519150601f19603f3d011682016040523d82523d6000602084013e611389565b606091505b50915091506113998282866113a4565b979650505050505050565b606083156113b357508161126c565b8251156113c35782518084602001fd5b8160405162461bcd60e51b815260040161047f9190611a9a565b803562ffffff811681146113f057600080fd5b919050565b60006020828403121561140757600080fd5b61126c826113dd565b8015158114610ff557600080fd5b6000806040838503121561143157600080fd5b61143a836113dd565b9150602083013561144a81611410565b809150509250929050565b6000806040838503121561146857600080fd5b82359150602083013561144a81611410565b6000806040838503121561148d57600080fd5b8235915061149d602084016113dd565b90509250929050565b61ffff81168114610ff557600080fd5b600080600080608085870312156114cc57600080fd5b6114d5856113dd565b93506020850135925060408501356114ec816114a6565b9150606085013563ffffffff8116811461150557600080fd5b939692955090935050565b60ff81168114610ff557600080fd5b60006020828403121561153157600080fd5b813561126c81611510565b6001600160a01b0381168114610ff557600080fd5b60006020828403121561156357600080fd5b813561126c8161153c565b601f8201601f1916810167ffffffffffffffff811182821017156115a257634e487b7160e01b600052604160045260246000fd5b6040525050565b604051610260810167ffffffffffffffff811182821017156115db57634e487b7160e01b600052604160045260246000fd5b60405290565b8051600f81900b81146113f057600080fd5b805167ffffffffffffffff811681146113f057600080fd5b80516113f0816114a6565b80516fffffffffffffffffffffffffffffffff19811681146113f057600080fd5b600061010080838503121561164b57600080fd5b6040519081019067ffffffffffffffff8211818310171561167c57634e487b7160e01b600052604160045260246000fd5b81604052611689846115e1565b8152611697602085016115e1565b60208201526116a8604085016115e1565b60408201526116b9606085016115e1565b60608201526116ca608085016115f3565b60808201526116db60a0850161160b565b60a08201526116ec60c0850161160b565b60c08201526116fd60e08501611616565b60e0820152949350505050565b60006020828403121561171c57600080fd5b61126c826115e1565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600062ffffff8084168061176757611767611725565b92169190910492915050565b60006020828403121561178557600080fd5b5051919050565b80516113f081611410565b6000602082840312156117a957600080fd5b815161126c81611410565b634e487b7160e01b600052603260045260246000fd5b808201808211156103e5576103e561173b565b60005b838110156117f85781810151838201526020016117e0565b50506000910152565b600081518084526118198160208601602086016117dd565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015611875578284038952611863848351611801565b9885019893509084019060010161184b565b5091979650505050505050565b60006040808301818452808651808352606092508286019150828160051b8701016020808a0160005b848110156119d457898403605f190186528151805162ffffff1685526101e0848201516118dc86880182600f0b9052565b508982015161ffff16868b01528882015163ffffffff9081168a88015260808084015182169088015260a0808401519091169087015260c0808301516001600160a01b03169087015260e080830151600f81900b8289015250506101008083015161194b82890182600f0b9052565b50506101208281015190870152610140808301516001600160a01b03169087015261016080830151908701526101808083015161ffff16908701526101a08083015181880183905261199f83890182611801565b925050506101c08083015192506119c0818801846001600160a01b03169052565b5096840196945050908201906001016118ab565b5050878203908801526119e7818961182d565b9998505050505050505050565b600060033d1115611a0d5760046000803e5060005160e01c5b90565b600060443d1015611a1e5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611a4e57505050505090565b8285019150815181811115611a665750505050505090565b843d8701016020828501011115611a805750505050505090565b611a8f6020828601018761156e565b509095945050505050565b60208152600061126c6020830184611801565b80516113f08161153c565b600060208284031215611aca57600080fd5b815161126c8161153c565b80516113f081611510565b8051600381900b81146113f057600080fd5b80516fffffffffffffffffffffffffffffffff811681146113f057600080fd5b60006102608284031215611b2557600080fd5b611b2d6115a9565b611b368361178c565b8152611b4460208401611ad5565b6020820152611b5560408401611ad5565b6040820152611b6660608401611ae0565b6060820152611b7760808401611ad5565b6080820152611b8860a0840161160b565b60a0820152611b9960c08401611aad565b60c0820152611baa60e084016115f3565b60e0820152610100611bbd8185016115e1565b90820152610120611bcf848201611aad565b90820152610140611be18482016115e1565b90820152610160611bf38482016115e1565b90820152610180611c058482016115e1565b908201526101a0611c178482016115e1565b908201526101c0611c298482016115e1565b908201526101e0611c3b848201611af2565b90820152610200611c4d848201611af2565b90820152610220611c5f848201611af2565b90820152610240611c718482016115e1565b908201529392505050565b80820260008212600160ff1b84141615611c9857611c9861173b565b81810583148215176103e5576103e561173b565b600082611cbb57611cbb611725565b600160ff1b821460001984141615611cd557611cd561173b565b500590565b60008251611cec8184602087016117dd565b919091019291505056fea26469706673582212200acb5d577bc15303d485c9ed365e0790d6fddfb4f4926986705a6fbd2ae6e7aa64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPerpetual(uint24)": {
        "params": {
          "_iPerpetualId": "id of the perpetual to be traded"
        }
      },
      "approveAmountForPerpetualMgnTkn(uint256,uint24)": {
        "params": {
          "_amount": "spend amount"
        }
      },
      "d8xExecutionCallback(bytes32,bool)": {
        "params": {
          "isExecuted": "true if order was succesfully executed",
          "orderDigest": "unique identifier for the order"
        }
      },
      "getMarginAccount(uint24)": {
        "params": {
          "_iPerpetualId": "id of perpetual "
        }
      },
      "getMaxTradeAmount(uint24,bool)": {
        "params": {
          "_iPerpetualId": "id of perpetual",
          "isBuy": "true if we go long, false if we go short"
        },
        "returns": {
          "_0": "signed maximal trade size (negative if resulting position is short, positive otherwise)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "postOrder(uint24,int256,uint16,uint32)": {
        "params": {
          "_amountDec18": "signed amount to be traded in base currency",
          "_flags": "order-flags, can be left 0 for a market order",
          "_iPerpetualId": "perpetual id for which we execute",
          "_leverageTDR": "leverage two-digit-integer), e.g. 210 for 2.1x leverage"
        },
        "returns": {
          "_0": "true if posting order succeeded"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPerpetual(uint24)": {
        "notice": "Anyone add a perpetual. Needs to be set once per perpetual. The function sets the order book address for an existing perpetual-id and ensures the margin token address is stored. "
      },
      "approveAmountForPerpetualMgnTkn(uint256,uint24)": {
        "notice": "Approve the margin-token to be spent by perpetuals contract. Required to trade."
      },
      "d8xExecutionCallback(bytes32,bool)": {
        "notice": "Callback function that will be called once the order is executed or cancelled"
      },
      "getMarginAccount(uint24)": {
        "notice": "Return margin account information in decimal 18 format"
      },
      "getMaxTradeAmount(uint24,bool)": {
        "notice": "Get maximal trade amount for the contract accounting for its current position"
      },
      "postOrder(uint24,int256,uint16,uint32)": {
        "notice": "Post an order to the order book. Order will be executed by external \"executors\". * Available order flags:  uint32 internal constant MASK_CLOSE_ONLY = 0x80000000;  uint32 internal constant MASK_MARKET_ORDER = 0x40000000;  uint32 internal constant MASK_STOP_ORDER = 0x20000000;  uint32 internal constant MASK_FILL_OR_KILL = 0x10000000;  uint32 internal constant MASK_KEEP_POS_LEVERAGE = 0x08000000;  uint32 internal constant MASK_LIMIT_ORDER = 0x04000000;"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 552,
        "contract": "contracts/OnChainTrader.sol:OnChainTrader",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1596,
        "contract": "contracts/OnChainTrader.sol:OnChainTrader",
        "label": "orderBookOfPerpetual",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint24,t_address)"
      },
      {
        "astId": 1600,
        "contract": "contracts/OnChainTrader.sol:OnChainTrader",
        "label": "mgnTknAddrOfPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint24,t_address)": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}